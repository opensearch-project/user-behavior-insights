import org.opensearch.gradle.test.RestIntegTestTask
import java.util.concurrent.Callable
import java.nio.file.Files

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'opensearch.opensearchplugin'
apply plugin: 'opensearch.pluginzip'
apply plugin: 'opensearch.yaml-rest-test'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'com.form.diff-coverage'

ext.opensearch_tmp_dir = rootProject.file('build/private/opensearch_tmp').absoluteFile
opensearch_tmp_dir.mkdirs()

configurations {
    zipArchive
    secureIntegTestPluginArchive
}

opensearchplugin {
    name 'opensearch-ubi'
    description 'OpenSearch User Behavior Insights Plugin'
    classname 'org.opensearch.ubi.UbiPlugin'
    licenseFile rootProject.file('LICENSE')
    noticeFile rootProject.file('NOTICE')
}

// disabling some unnecessary validations for this plugin
testingConventions.enabled = false
loggerUsageCheck.enabled = false
validateNebulaPom.enabled = false
forbiddenApisTest.enabled = false

buildscript {
    ext {
        opensearch_version = System.getProperty("opensearch.version", "3.3.1-SNAPSHOT")
        buildVersionQualifier = System.getProperty("build.version_qualifier", "")
        isSnapshot = "true" == System.getProperty("build.snapshot", "true")
        version_tokens = opensearch_version.tokenize('-')
        opensearch_build = version_tokens[0] + '.0'
        plugin_no_snapshot = opensearch_build
        if (buildVersionQualifier) {
            opensearch_build += "-${buildVersionQualifier}"
            plugin_no_snapshot += "-${buildVersionQualifier}"
        }
        if (isSnapshot) {
            opensearch_build += "-SNAPSHOT"
        }
        opensearch_group = "org.opensearch"
        opensearch_no_snapshot = opensearch_build.replace("-SNAPSHOT","")
    }

    repositories {
        mavenLocal()
        maven { url "https://central.sonatype.com/repository/maven-snapshots/" }
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
        classpath "com.github.form-com.diff-coverage-gradle:diff-coverage:0.9.5"
    }    
}

repositories {
    mavenLocal()
    maven { url "https://central.sonatype.com/repository/maven-snapshots/" }
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

thirdPartyAudit.enabled = false

dependencies {
    runtimeOnly "org.apache.logging.log4j:log4j-core:${versions.log4j}"
    api "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
    api "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
    api "com.fasterxml.jackson.core:jackson-databind:${versions.jackson_databind}"
    api "org.apache.httpcomponents:httpcore:${versions.httpcore}"
    api "org.apache.httpcomponents:httpclient:${versions.httpclient}"
    api "commons-logging:commons-logging:${versions.commonslogging}"
    zipArchive group: 'org.opensearch.plugin', name:'opensearch-job-scheduler', version: "${opensearch_build}"

    testImplementation("org.opensearch:opensearch-agent-bootstrap:${opensearch_version}")

    yamlRestTestImplementation("org.opensearch:opensearch-agent-bootstrap:${opensearch_version}")
    yamlRestTestImplementation "org.apache.logging.log4j:log4j-core:${versions.log4j}"

    configurations.all {
        resolutionStrategy {
            force("com.google.errorprone:error_prone_annotations:2.41.0") // Fix version conflict
        }
    }
}

test {
    systemProperty 'tests.security.manager', 'false'
}

yamlRestTest {
    systemProperty 'tests.security.manager', 'false'
}

allprojects {
    group = 'org.opensearch'
    version = opensearch_version.tokenize('-')[0] + '.0'
    if (buildVersionQualifier) {
        version += "-${buildVersionQualifier}"
    }
    if (isSnapshot) {
        version += "-SNAPSHOT"
    }

    plugins.withId('java') {
        targetCompatibility = JavaVersion.VERSION_21
        sourceCompatibility = JavaVersion.VERSION_21
    }
}

publishing {
    repositories {
        maven {
            name = "Snapshots"
            url = "https://central.sonatype.com/repository/maven-snapshots/"
            credentials {
                username System.getenv("SONATYPE_USERNAME")
                password System.getenv("SONATYPE_PASSWORD")
            }
        }
        maven {
            name = 'staging'
            url = "${rootProject.buildDir}/local-staging-repo"
        }
    }
    publications {
        pluginZip(MavenPublication) { publication ->
            pom {
                name = "opensearch-ubi"
                description = "OpenSearch User Behavior Insights plugin"
                groupId = "org.opensearch.plugin"
            }
        }
        all {
            pom {
                name = "opensearch-ubi"
                description = "OpenSearch User Behavior Insights plugin"
            }
            pom.withXml { XmlProvider xml ->
                Node node = xml.asNode()
                node.appendNode('inceptionYear', '2021')
                if (!node.'description') {
                    node.appendNode('description', description)
                }

                if (!node.'licenses') {
                    Node license = node.appendNode('licenses').appendNode('license')
                    license.appendNode('name',  "The Apache License, Version 2.0")
                    license.appendNode('url', "http://www.apache.org/licenses/LICENSE-2.0.txt")
                }

                if (!node.'developers') {
                    Node developer = node.appendNode('developers').appendNode('developer')
                    developer.appendNode('name', 'OpenSearch')
                    developer.appendNode('url', 'https://github.com/opensearch-project/user-behavior-insights')
                }
            }
        }
    }
}

def _numNodes = findProperty('numNodes') as Integer ?: 1

test {
    include '**/*Tests.class'
    systemProperty 'tests.security.manager', 'false'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}
tasks.named("check").configure { dependsOn(jacocoTestReport) }

// Setting up Integration Tests
task integTest(type: RestIntegTestTask) {
    description = "Run tests against a cluster"
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}
tasks.named("check").configure { dependsOn(integTest) }

integTest {
    systemProperty 'tests.security.manager', 'false'
    systemProperty 'java.io.tmpdir', opensearch_tmp_dir.absolutePath
    // allows integration test classes to access test resource from project root path
    systemProperty('project.root', project.rootDir.absolutePath)
    systemProperty 'security.enabled', System.getProperty('security.enabled')
    var is_https = System.getProperty("https")
    var user = System.getProperty("user")
    var password = System.getProperty("password")
    if (System.getProperty("security.enabled") != null) {
        // If security is enabled, set is_https/user/password defaults
        is_https = is_https == null ? "true" : is_https
        user = user == null ? "admin" : user
        password = password == null ? "admin" : password
    }
    systemProperty("https", is_https)
    systemProperty("user", user)
    systemProperty("password", password)

    doFirst {
        // Tell the test JVM if the cluster JVM is running under a debugger so that tests can
        // use longer timeouts for requests.
        def isDebuggingCluster = getDebug() || System.getProperty("test.debug") != null
        systemProperty 'cluster.debug', isDebuggingCluster
        // Set number of nodes system property to be used in tests
        systemProperty 'cluster.number_of_nodes', "${_numNodes}"
        // There seems to be an issue when running multi node run or integ tasks with unicast_hosts
        // not being written, the waitForAllConditions ensures it's written
        getClusters().forEach { cluster ->
            cluster.waitForAllConditions()
        }
    }

    // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
    }
}

testClusters.integTest {
    testDistribution = "ARCHIVE"

    // Optionally install security
    if (System.getProperty("security.enabled") != null && System.getProperty("security.enabled") == "true") {
        configureSecurityPlugin(testClusters.integTest)
    }

    // Install plugins on the integTest cluster nodes
    configurations.zipArchive.asFileTree.each {
        plugin(provider(new Callable<RegularFile>(){
            @Override
            RegularFile call() throws Exception {
                return new RegularFile() {
                    @Override
                    File getAsFile() {
                        return it
                    }
                }
            }
        }))
    }

    plugin(project.tasks.bundlePlugin.archiveFile)
    // Cluster shrink exception thrown if we try to set numberOfNodes to 1, so only apply if > 1
    if (_numNodes > 1) numberOfNodes = _numNodes
    // When running integration tests it doesn't forward the --debug-jvm to the cluster anymore
    // i.e. we have to use a custom property to flag when we want to debug opensearch JVM
    // since we also support multi node integration tests we increase debugPort per node
    if (System.getProperty("cluster.debug") != null) {
        def debugPort = 5005
        nodes.forEach { node ->
            node.jvmArgs("-agentlib:jdwp=transport=dt_socket,server=n,suspend=y,address=${debugPort}")
            debugPort += 1
        }
    }
}

ext.createDiffFile = { ->
    def file = Files.createTempFile(URLEncoder.encode(project.name, 'UTF-8'), '.diff').toFile()
    def diffBase = 'refs/remotes/origin/main'
    // Only run locally
    if (!System.getenv('CI')) {
        file.withOutputStream { out ->
            exec {
                commandLine 'git', 'diff', '--no-color', '--minimal', diffBase
                standardOutput = out
            }
        }
    }
    return file
}

diffCoverageReport {
    afterEvaluate {
        diffSource.file = createDiffFile()
    }

    // View report at build/reports/jacoco/diffCoverage/html/index.html
    reports {
        html = true
    }

    violationRules {
        minBranches = 0.00
        minLines = 0.00
        failOnViolation = true
    }
}

// updateVersion: Task to auto update version to the next development iteration
task updateVersion {
    onlyIf { System.getProperty('newVersion') }
    doLast {
        ext.newVersion = System.getProperty('newVersion')
        println "Setting version to ${newVersion}."
         // String tokenization to support -SNAPSHOT
        ant.replaceregexp(file:'build.gradle', match: '"opensearch.version", "\\d.*"', replace: '"opensearch.version", "' + newVersion.tokenize('-')[0] + '-SNAPSHOT"', flags:'g', byline:true)
    }
}
